package main

import (
	"bsc_relayer/pkg/contracts"
	"bsc_relayer/pkg/utils"
	"context"
	//"encoding/json"
	"fmt"
	"github.com/binance-chain/bsc-go-client/client"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	//"io/ioutil"
	"math/big"
	//"os"
	//"strconv"
)

func main() {

	//blockNumber, err := strconv.Atoi(os.Args[1])
	//var c, _ = client.Dial("wss://127.0.0.1:8545/")

	var c, _ = client.Dial("wss://eth-ropsten.alchemyapi.io/v2/B9ctAGI1bCboamSzQE58Xu8b0MPFK_C1")

	bscRelay, err := contracts.NewBSCRelay(common.HexToAddress("0x8d7E814304b5BCa6439eb64833C04248b453C09F"), c) //address used for deployment
	if err != nil{
		panic(err)
	}

	sink := make(chan *types.Header)
	_, err = c.SubscribeNewHead(context.Background(), sink)
	if err != nil{
		panic(err)
	}

	ecdsaPrivateKey, err := crypto.HexToECDSA("846477feec0688dc6aa53d05bb4824fb1105f0f2c377e0d78fbde16dd99619ac") //general private key (generated by ganache or metamask)
	if err != nil{
		panic(err)
	}
	auth := bind.NewKeyedTransactor(ecdsaPrivateKey)

	//check current state of the relay contract and submit all the missing epoch blocks up to now
	lastEBSubmitted, err := bscRelay.GetLastEpochBlockSubmitted(nil)
	fmt.Printf("last EB submitted %d", lastEBSubmitted)

	//endless loop for keeping the relay contract up to date
	for header := range sink {
		var unsignedHeaderRLP [12][]byte
		var signedHeaderRLP [12][]byte
		var validatorSet []common.Address

		fmt.Println(header)
		if (header.Number.Int64() - 11) % 200 == 0 {
			for jj := 11; jj >= 0; jj-- {
				if jj == 11 {
					var lastEBheader, err = c.HeaderByNumber(context.Background(), big.NewInt(header.Number.Int64() - int64(jj) - 200))
					if err != nil{
						panic(err)
					}
					validatorSet = utils.GetValidatorSet(lastEBheader)
				}

				header, err := c.HeaderByNumber(context.Background(), big.NewInt(header.Number.Int64() - int64(jj)))

				unsignedHeaderRLP[11-jj], err = utils.EncodeHeaderToRLP(header, big.NewInt(56)) //56 is mainnet
				if err != nil{
					panic(err)
				}

				signedHeaderRLP[11-jj], err = utils.EncodeHeaderToRLP_noChainId(header) //56 is mainnet
				if err != nil{
					panic(err)
				}
			}
		}

		_, err := bscRelay.SubmitEpochBlock(auth, unsignedHeaderRLP[:], signedHeaderRLP[:], validatorSet) //I use _ because I do not need it afterwards
		if err != nil{
			panic(err)
		}

	}


}



